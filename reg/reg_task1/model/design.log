
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.21+1 (git sha1 4fa4161aa, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: reg.v
Parsing formal SystemVerilog input from `reg.v' to AST representation.
Storing AST representation for module `$abstract\eightbit_reg'.
Successfully finished Verilog frontend.

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\eightbit_reg'.
Generating RTLIL representation for module `\eightbit_reg'.

2.2.1. Analyzing design hierarchy..
Top module:  \eightbit_reg

2.2.2. Analyzing design hierarchy..
Top module:  \eightbit_reg
Removing unused module `$abstract\eightbit_reg'.
Removed 1 unused modules.
Module eightbit_reg directly or indirectly contains formal properties -> setting "keep" attribute.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 5 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\eightbit_reg.$proc$reg.v:0$11'.
  Set init value: $formal$reg.v:21$2_EN = 1'0
Found init rule in `\eightbit_reg.$proc$reg.v:17$10'.
  Set init value: \f_past_valid = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\eightbit_reg.$proc$reg.v:0$11'.
Creating decoders for process `\eightbit_reg.$proc$reg.v:17$10'.
Creating decoders for process `\eightbit_reg.$proc$reg.v:19$4'.
     1/2: $0$formal$reg.v:21$2_EN[0:0]$7
     2/2: $0$formal$reg.v:21$2_CHECK[0:0]$6
Creating decoders for process `\eightbit_reg.$proc$reg.v:9$3'.

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\eightbit_reg.\f_past_valid' using process `\eightbit_reg.$proc$reg.v:19$4'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\eightbit_reg.$past$reg.v:22$1$0' using process `\eightbit_reg.$proc$reg.v:19$4'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\eightbit_reg.$formal$reg.v:21$2_CHECK' using process `\eightbit_reg.$proc$reg.v:19$4'.
  created $dff cell `$procdff$19' with positive edge clock.
Creating register for signal `\eightbit_reg.$formal$reg.v:21$2_EN' using process `\eightbit_reg.$proc$reg.v:19$4'.
  created $dff cell `$procdff$20' with positive edge clock.
Creating register for signal `\eightbit_reg.\in_reg' using process `\eightbit_reg.$proc$reg.v:9$3'.
  created $dff cell `$procdff$21' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `eightbit_reg.$proc$reg.v:0$11'.
Removing empty process `eightbit_reg.$proc$reg.v:17$10'.
Found and cleaned up 1 empty switch in `\eightbit_reg.$proc$reg.v:19$4'.
Removing empty process `eightbit_reg.$proc$reg.v:19$4'.
Removing empty process `eightbit_reg.$proc$reg.v:9$3'.
Cleaned up 1 empty switch.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module eightbit_reg.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module eightbit_reg.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \eightbit_reg..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

2.6. Executing CHECK pass (checking for obvious problems).
Checking module eightbit_reg...
Warning: multiple conflicting drivers for eightbit_reg.\out [7]:
    port Q[7] of cell $procdff$21 ($dff)
    module input out[7]
Warning: multiple conflicting drivers for eightbit_reg.\out [6]:
    port Q[6] of cell $procdff$21 ($dff)
    module input out[6]
Warning: multiple conflicting drivers for eightbit_reg.\out [5]:
    port Q[5] of cell $procdff$21 ($dff)
    module input out[5]
Warning: multiple conflicting drivers for eightbit_reg.\out [4]:
    port Q[4] of cell $procdff$21 ($dff)
    module input out[4]
Warning: multiple conflicting drivers for eightbit_reg.\out [3]:
    port Q[3] of cell $procdff$21 ($dff)
    module input out[3]
Warning: multiple conflicting drivers for eightbit_reg.\out [2]:
    port Q[2] of cell $procdff$21 ($dff)
    module input out[2]
Warning: multiple conflicting drivers for eightbit_reg.\out [1]:
    port Q[1] of cell $procdff$21 ($dff)
    module input out[1]
Warning: multiple conflicting drivers for eightbit_reg.\out [0]:
    port Q[0] of cell $procdff$21 ($dff)
    module input out[0]
Found and reported 8 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module eightbit_reg.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\eightbit_reg'.
Removed a total of 0 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \eightbit_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \eightbit_reg.
Performed a total of 0 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\eightbit_reg'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \eightbit_reg..

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module eightbit_reg.

2.7.8. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \eightbit_reg..

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module eightbit_reg.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\eightbit_reg'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \eightbit_reg..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== eightbit_reg ===

   Number of wires:                 11
   Number of wire bits:             39
   Number of public wires:           5
   Number of public wire bits:      26
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $assert                         1
     $dff                            5
     $eq                             1
     $mux                            2

2.13. Executing CHECK pass (checking for obvious problems).
Checking module eightbit_reg...
Warning: multiple conflicting drivers for eightbit_reg.\out [7]:
    port Q[7] of cell $procdff$21 ($dff)
    module input out[7]
Warning: multiple conflicting drivers for eightbit_reg.\out [6]:
    port Q[6] of cell $procdff$21 ($dff)
    module input out[6]
Warning: multiple conflicting drivers for eightbit_reg.\out [5]:
    port Q[5] of cell $procdff$21 ($dff)
    module input out[5]
Warning: multiple conflicting drivers for eightbit_reg.\out [4]:
    port Q[4] of cell $procdff$21 ($dff)
    module input out[4]
Warning: multiple conflicting drivers for eightbit_reg.\out [3]:
    port Q[3] of cell $procdff$21 ($dff)
    module input out[3]
Warning: multiple conflicting drivers for eightbit_reg.\out [2]:
    port Q[2] of cell $procdff$21 ($dff)
    module input out[2]
Warning: multiple conflicting drivers for eightbit_reg.\out [1]:
    port Q[1] of cell $procdff$21 ($dff)
    module input out[1]
Warning: multiple conflicting drivers for eightbit_reg.\out [0]:
    port Q[0] of cell $procdff$21 ($dff)
    module input out[0]
Found and reported 8 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \eightbit_reg

3.2. Analyzing design hierarchy..
Top module:  \eightbit_reg
Removed 0 unused modules.
Module eightbit_reg directly or indirectly contains formal properties -> setting "keep" attribute.

4. Executing jny backend.

5. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 8 unique messages, 16 total
End of script. Logfile hash: 79bad3d10d, CPU: user 0.02s system 0.01s, MEM: 6.03 MB peak
Yosys 0.21+1 (git sha1 4fa4161aa, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 31% 5x opt_expr (0 sec), 25% 4x opt_clean (0 sec), ...
