; SMT-LIBv2 description generated by Yosys 0.21+1 (git sha1 4fa4161aa, clang 10.0.0-4ubuntu1 -fPIC -Os)
; yosys-smt2-module eightbit_reg
(declare-sort |eightbit_reg_s| 0)
(declare-fun |eightbit_reg_is| (|eightbit_reg_s|) Bool)
; yosys-smt2-anyinit eightbit_reg#0 8 reg.v:9.5-11.8
; yosys-smt2-witness {"offset": 0, "path": ["\\out"], "smtname": 0, "type": "init", "width": 8}
(declare-fun |eightbit_reg#0| (|eightbit_reg_s|) (_ BitVec 8)) ; \out
; yosys-smt2-input out 8
; yosys-smt2-register out 8
; yosys-smt2-wire out 8
; yosys-smt2-witness {"offset": 0, "path": ["\\out"], "smtname": "out", "type": "input", "width": 8}
(define-fun |eightbit_reg_n out| ((state |eightbit_reg_s|)) (_ BitVec 8) (|eightbit_reg#0| state))
; yosys-smt2-wire in_reg 8
(define-fun |eightbit_reg_n in_reg| ((state |eightbit_reg_s|)) (_ BitVec 8) (|eightbit_reg#0| state))
(declare-fun |eightbit_reg#1| (|eightbit_reg_s|) (_ BitVec 8)) ; \in
; yosys-smt2-input in 8
; yosys-smt2-wire in 8
; yosys-smt2-witness {"offset": 0, "path": ["\\in"], "smtname": "in", "type": "input", "width": 8}
(define-fun |eightbit_reg_n in| ((state |eightbit_reg_s|)) (_ BitVec 8) (|eightbit_reg#1| state))
; yosys-smt2-witness {"offset": 0, "path": ["\\f_past_valid"], "smtname": 2, "type": "reg", "width": 1}
(declare-fun |eightbit_reg#2| (|eightbit_reg_s|) (_ BitVec 1)) ; \f_past_valid
; yosys-smt2-register f_past_valid 1
; yosys-smt2-wire f_past_valid 1
(define-fun |eightbit_reg_n f_past_valid| ((state |eightbit_reg_s|)) Bool (= ((_ extract 0 0) (|eightbit_reg#2| state)) #b1))
(declare-fun |eightbit_reg#3| (|eightbit_reg_s|) Bool) ; \clk
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
; yosys-smt2-clock clk posedge
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "type": "posedge", "width": 1}
; yosys-smt2-witness {"offset": 0, "path": ["\\clk"], "smtname": "clk", "type": "input", "width": 1}
(define-fun |eightbit_reg_n clk| ((state |eightbit_reg_s|)) Bool (|eightbit_reg#3| state))
; yosys-smt2-anyseq eightbit_reg#4 1 $auto$setundef.cc:525:execute$22
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyseq_auto_setundef_cc_525_execute_22"], "smtname": 4, "type": "seq", "width": 1}
(declare-fun |eightbit_reg#4| (|eightbit_reg_s|) (_ BitVec 1)) ; \_witness_.anyseq_auto_setundef_cc_525_execute_22
; yosys-smt2-wire _witness_.anyseq_auto_setundef_cc_525_execute_22 1
(define-fun |eightbit_reg_n _witness_.anyseq_auto_setundef_cc_525_execute_22| ((state |eightbit_reg_s|)) Bool (= ((_ extract 0 0) (|eightbit_reg#4| state)) #b1))
; yosys-smt2-anyinit eightbit_reg#5 1 reg.v:19.5-23.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_19"], "smtname": 5, "type": "init", "width": 1}
(declare-fun |eightbit_reg#5| (|eightbit_reg_s|) (_ BitVec 1)) ; \_witness_.anyinit_procdff_19
; yosys-smt2-register _witness_.anyinit_procdff_19 1
; yosys-smt2-wire _witness_.anyinit_procdff_19 1
(define-fun |eightbit_reg_n _witness_.anyinit_procdff_19| ((state |eightbit_reg_s|)) Bool (= ((_ extract 0 0) (|eightbit_reg#5| state)) #b1))
; yosys-smt2-anyinit eightbit_reg#6 8 reg.v:19.5-23.8
; yosys-smt2-witness {"offset": 0, "path": ["\\_witness_", "\\anyinit_procdff_18"], "smtname": 6, "type": "init", "width": 8}
(declare-fun |eightbit_reg#6| (|eightbit_reg_s|) (_ BitVec 8)) ; \_witness_.anyinit_procdff_18
; yosys-smt2-register _witness_.anyinit_procdff_18 8
; yosys-smt2-wire _witness_.anyinit_procdff_18 8
(define-fun |eightbit_reg_n _witness_.anyinit_procdff_18| ((state |eightbit_reg_s|)) (_ BitVec 8) (|eightbit_reg#6| state))
; yosys-smt2-witness {"offset": 0, "path": ["$formal$reg.v:21$2_EN"], "smtname": 7, "type": "reg", "width": 1}
(declare-fun |eightbit_reg#7| (|eightbit_reg_s|) (_ BitVec 1)) ; $formal$reg.v:21$2_EN
; yosys-smt2-register $formal$reg.v:21$2_EN 1
(define-fun |eightbit_reg_n $formal$reg.v:21$2_EN| ((state |eightbit_reg_s|)) Bool (= ((_ extract 0 0) (|eightbit_reg#7| state)) #b1))
; yosys-smt2-assert 0 $assert$reg.v:21$9 reg.v:21.27-22.37
(define-fun |eightbit_reg_a 0| ((state |eightbit_reg_s|)) Bool (or (= ((_ extract 0 0) (|eightbit_reg#5| state)) #b1) (not (= ((_ extract 0 0) (|eightbit_reg#7| state)) #b1)))) ; $assert$reg.v:21$9
(define-fun |eightbit_reg#8| ((state |eightbit_reg_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|eightbit_reg#2| state)) #b1) #b1 #b0)) ; $0$formal$reg.v:21$2_EN[0:0]$7
(define-fun |eightbit_reg#9| ((state |eightbit_reg_s|)) Bool (= (|eightbit_reg#0| state) (|eightbit_reg#6| state))) ; $eq$reg.v:22$8_Y
(define-fun |eightbit_reg#10| ((state |eightbit_reg_s|)) (_ BitVec 1) (ite (= ((_ extract 0 0) (|eightbit_reg#2| state)) #b1) (ite (|eightbit_reg#9| state) #b1 #b0) (|eightbit_reg#4| state))) ; $0$formal$reg.v:21$2_CHECK[0:0]$6
(define-fun |eightbit_reg_a| ((state |eightbit_reg_s|)) Bool 
  (|eightbit_reg_a 0| state)
)
(define-fun |eightbit_reg_u| ((state |eightbit_reg_s|)) Bool true)
(define-fun |eightbit_reg_i| ((state |eightbit_reg_s|)) Bool (and
  (= (= ((_ extract 0 0) (|eightbit_reg#2| state)) #b1) false) ; f_past_valid
  (= (= ((_ extract 0 0) (|eightbit_reg#7| state)) #b1) false) ; $formal$reg.v:21$2_EN
))
(define-fun |eightbit_reg_h| ((state |eightbit_reg_s|)) Bool true)
(define-fun |eightbit_reg_t| ((state |eightbit_reg_s|) (next_state |eightbit_reg_s|)) Bool (and
  (= (|eightbit_reg#8| state) (|eightbit_reg#7| next_state)) ; $procdff$20 $formal$reg.v:21$2_EN
  (= (|eightbit_reg#1| state) (|eightbit_reg#6| next_state)) ; $procdff$18 \_witness_.anyinit_procdff_18
  (= (|eightbit_reg#10| state) (|eightbit_reg#5| next_state)) ; $procdff$19 \_witness_.anyinit_procdff_19
  (= #b1 (|eightbit_reg#2| next_state)) ; $procdff$17 \f_past_valid
  (= (|eightbit_reg#1| state) (|eightbit_reg#0| next_state)) ; $procdff$21 \out
)) ; end of module eightbit_reg
; yosys-smt2-topmod eightbit_reg
; end of yosys output
